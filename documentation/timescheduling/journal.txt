Journal

W1:

- Grobinformationen zum Ablauf erhalten
- Genaue Aufgabenstellung erhalten
- Beginn studieren der Aufgabenstellung

W2:

- Groben Zeitplan erstellt
- Termin mit Andreas Danuser vereinbart für das Kickoff Meeting

W3:

- Suche nach existierenden Prdukten
- Synergy (https://symless.com/synergy)
- Synergy-core (https://github.com/symless/synergy-core)
- Microsoft Multipoint

W4:

- 05.10.2018, 17.30, Kickoff-Meeting
- Synergy einigermassen verstanden
- Lässt eine Maus übers Netzwerk auf einem anderen PC verwenden
- Benutz den selben Curser, die externe Maus ist einer zweiten lokalen gleichgesetzt
- Einige Ansätze könnten nützlich sein, versucht aber nicht ganz das selbe Problem zu Lösen, die externe Maus verwendet den selben Cursor
- Bestellung von Mac mini ausgelöst, wird benötigt für tests unter OSX
- Grobplanung versendet

W5:

- Lösungsansatz für Linux und OSX definiert
- Lösungsansatz: Direkter zugriff auf /dev/input/mice etc. evtl. kombiniert mit Xserver
- Weitere Infos zu Lösungsansatz
    - https://unix.stackexchange.com/questions/25601/how-do-mouse-events-work-in-linux
    - https://www.kernel.org/doc/Documentation/input/input.txt
    - http://cmp.felk.cvut.cz/~pisa/linux/mousedrivers.pdf
    - https://unix.stackexchange.com/questions/388053/disable-mouse-pointer-but-read-the-mouse-events
    - https://askubuntu.com/questions/1043832/difference-between-dev-input-mouse0-and-dev-input-mice
- Ersatzlösung (evtl. Teillösung von Lösungsansatz):
    - Xserver
    - siehe P2
    - https://unix.stackexchange.com/questions/397339/xcb-asynchronous-pointer-grab-not-propagating-events
    - https://www.systutorials.com/docs/linux/man/3-XSendEvent/
    - https://www.x.org/wiki/guide/debugging/
- Ersatzlösung:
    - libgpm https://www.linuxjournal.com/article/4600
    - https://github.com/telmich/gpm
- Lösung Windows noch offen! Noch keine schlaue Lösung gefunden

W6:

- Lösung Windows noch offen! Noch keine schlaue Lösung gefunden
    - https://docs.microsoft.com/en-us/windows-hardware/drivers/samples/input-driver-samples
    - https://github.com/Microsoft/Windows-driver-samples/blob/master/input/moufiltr/moufiltr.c
- Scope für Projekt erstellt
- Grobe Klassendiagramme für Projekt erstellt
- Erster PoC-Code

W7:

- Mehr PoC Code
- Wegen Arbeit, leider keine weitere Zeit investiert in die Lösungssuche für Windows
- Wegen Arbeit, leider nur wenig Zeit in PM investiert
- Windows Lösung aus Scope gestrichen!

W8:

- Wähle definitiven Lösungsansatz
- Beginne mit dem richtigen Software Code für Linux

W9:

- Alle nötigen Klassen erstellt, oft noch mit Dummyfunktionen
- Beginne damit Poc-Code ins Projekt zu implementieren
- Verfeinere Lösungsansatz im Detail für Linux

W10:

- Treffen mit dem Experten Thomas Jäggi
    - Erwähnt Logitech Flow
    - Logitechflow wird in Stand der Tehcnik aufgenommen
- Mehr Poc-Code (opengl x11)
- Mehr Linux implementationscode

W11:
- Mehr Poc-Code (opengl x11)
- Der Grossteil der Funktionalität in der Linuximplementation läuft

W12:

- Der Linux Port läuft. Sowohl Multi- wie Remotemaus!
- Portiere den code auf Mac OS

W13:

- bekomme Code unter Mac OS zum Kompilieren und Linken
- Funktionen gehen nur eingeschränkt unter Mac OS
- Optimiere Linux code

W14:

- Übernehme erarbeite Informationen in Thesis
- Versuche mehr funktionalität unter Mac OS zu erhalten
- Optimiere Linux Code
- Optimiere Mac OS Code
- Erstelle Bookeintrag
- Erstelle Ausstellungsposter

W15:

- Thesis Inhalt beinahe komplett erstellt
- Versuche mehr funktionalität unter Mac OS zu erhalten
- kleinere Bugfixes im allgemeinen Code

W16:

- Finale Verison der Thesis fertig gestellt
- Feinschliff der finalen Thesis Version
- Abgabereife Thesis erstellt
- Nötige Präsentationsfolien erstellt
- Präsentation Hauptprobe
- Überarbeiten der Präsentation
